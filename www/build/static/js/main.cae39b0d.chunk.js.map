{"version":3,"sources":["graph/config.js","api/api.js","graph/graphtypes.js","graph/d3state.js","graph/d3prefabs.js","components/graph/Graph.js","components/wikibox/WikiBox.js","components/spinner/Spinner.js","components/searchbar/SearchBar.jsx","callbackmanager/callbackmanager.js","components/slider/Slider.js","components/cfgbox/ConfigBox.js","components/navbar/NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["clamp","val","min","max","GRAPHCONFIG","d3containerName","svgBackgroundColor","nodeSizeMin","nodeSizeMax","nodeSizeMultiplier","nodeSize","nodeCount","containerWidth","containerHeight","c","Math","sqrt","nodeColorBrightnessMin","nodeColorBrightnessMax","nodeColorBrightness","nodeColorHistoryMultiplier","nodeColor","n","brighness","genModi","generation","r","b","toString","linkWidth","linkColor","linkDistanceMin","linkDistanceMax","linkDistanceMultiplier","linkDistance","labelOffsetX","labelOffsetY","labelColor","graphNeighbourCount","graphGenerationCount","axiosDefault","axios","default","serverPath","searchArticlesByContent","str","a","limit","endpoint","post","resp","data","searchArticlesByNeighs","id","searchHTMLByID","checkRelsExist","rels","randomArticles","Node","apiJSON","preserved","this","title","html","x","graphWidth","y","graphHeight","Edge","fromID","toID","Graph","nodes","edges","Object","values","map","e","filter","node","sort","m","force","forEach","edge","undefined","trimGeneration","candidates","ids","keys","i","length","j","push","api","pair","confirmations","_","index","seedNode","pullNeigh","newNodes","neigh","assign","recalculateEdges","nodeID","nodeTitle","randResp","addInitialGenerationBySeedNode","D3State","divID","containerCallbacks","onNodeClick","callback","nodeClick","then","setForceSimulation","apply","svg","forceSimulation","linkGroup","nodeGroup","setSVG","setLinkGroup","setNodeGroup","addInitialGeneration","config","resizeCallback","uiLayer","d3","append","window","on","attr","target","innerWidth","innerHeight","zoom","scaleExtent","transform","call","d3prefabs","l","formatD3Nodes","width","getBoundingClientRect","height","forceCenterX","forceCenterY","collisionDistance","distance","containerID","oldLinkGroup","newLinkGroup","selectAll","enter","formatD3Edges","oldNodeGroup","nodeColorFunc","clickEvent","newNodeGroup","select","style","source","text","remove","links","state","d3state","containerCallbackOnNodeClick","callbacks","props","callbackManager","callbackFuncs","res","f","g","resetGraph","setState","dispatchEvent","Event","registerObserver","wikidata","d","resetGraphUsingNode","console","log","catch","rej","Component","WikiBox","content","txt","className","dangerouslySetInnerHTML","__html","Spinner","loading","SearchBar","currentText","resultReturned","done","textInput","type","placeholder","onChange","value","onKeyDown","key","onClick","CallbackManager","registry","subjectClassName","subjectFuncName","observerRef","observerFuncName","idSubject","subjectCandidate","observerCandidate","arr","observers","Slider","minVal","maxVal","defaultVal","defaultValue","ConfigBox","parseInt","NavBar","href","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cae39b0d.chunk.js","sourcesContent":["// # Config for this folder.\n\nfunction clamp(val, min, max) {\n\tif (val < min) {val = min}\n\tif (val > max) {val = max}\n\treturn val\n}\n\n\nlet GRAPHCONFIG = {\n    // # Used to identify groups(nodes, links, etc)\n    d3containerName: 'g',\n    // # Background color for whole d3 thing.\n    svgBackgroundColor: '#1f1d2b', // #202020',\n    // # ------------ nodes ------------------------------ # //\n    // # Dynamic node size. <w> & <h> are width and height\n    // # of the d3 svg. <c> is the total node count.\n\tnodeSizeMin: 20,\n\tnodeSizeMax: 50,\n\tnodeSizeMultiplier: 1,\n    nodeSize: (nodeCount, containerWidth, containerHeight) => {\n\t\tlet c = clamp(nodeCount, 1, nodeCount)\n\t\tlet maxRadius = Math.sqrt(containerWidth*containerHeight) / c\n\t\tlet newRadius = maxRadius / 3 * GRAPHCONFIG.nodeSizeMultiplier\n\t\treturn clamp(newRadius, GRAPHCONFIG.nodeSizeMin, GRAPHCONFIG.nodeSizeMax)\n    },\n    // # Color of all nodes. <n> is a Node type.\n\tnodeColorBrightnessMin:20,\n\tnodeColorBrightnessMax:100,\n\tnodeColorBrightness:50,\n\tnodeColorHistoryMultiplier:40,\n    nodeColor: (n) => {\n\t\tlet brighness = clamp(\n\t\t\tGRAPHCONFIG.nodeColorBrightness,\n\t\t\tGRAPHCONFIG.nodeColorBrightnessMin,\n\t\t\tGRAPHCONFIG.nodeColorBrightnessMax\n\t\t)\n\t\t// # Generation color modifier (additional brighness per gen.)\n\t\tlet genModi = n.generation * GRAPHCONFIG.nodeColorHistoryMultiplier\n        let r = brighness + genModi\n        let b = brighness + genModi\n\t\tr = clamp(r, 0, 255)\n\t\tb = clamp(r, 0, 255)\n        r = r.toString(16)\n        b = b.toString(16)\n\t\t// # Override to green if node is the current select.\n\t\treturn n.generation == 0? '#00ff33' : `#${r}00${b}` \n\n    },\n    // # ------------ edges ------------------------------ # //\n    linkWidth: 2,\n    linkColor: '#555555',\n    // # Dynamic link dist. <w> & <h> are width and height\n    // # of the d3 svg. <c> is the total node count.\n\tlinkDistanceMin: 50,\n\tlinkDistanceMax: 500,\n\tlinkDistanceMultiplier: 1,\n    linkDistance: (nodeCount, containerWidth, containerHeight) => {\n\t\tlet newSize = GRAPHCONFIG.nodeSize(\n            nodeCount,\n            containerWidth,\n            containerHeight\n        )\n\t\treturn clamp(\n\t\t\t\tnewSize,\n\t\t\t\tGRAPHCONFIG.linkDistanceMin,\n\t\t\t\tGRAPHCONFIG.linkDistanceMax\n\t\t)\n\t},\n\n    // # ------------ labels ------------------------------ # //\n    labelOffsetX:4,\n    labelOffsetY:2,\n    labelColor:'#ffffff',\n\n    // # ------------ graph ------------------------------ # //\n\tgraphNeighbourCount: 3,\n    graphGenerationCount: 3\n}\nexport default GRAPHCONFIG\n","// # This module is a direct mirror of endpoint definition at:\n// #    https://github.com/crunchypi/wikinodes-server\n// # \n// # More details found above individual funcs.\n\nimport axios from 'axios'\nconst axiosDefault = axios.default;\n\nconst serverIP = 'http://localhost';\nconst serverPort = 1234;\nconst serverPath = `${serverIP}:${serverPort}`;\n\n\n// # Searches the backend for an article (partial) with the given\n// # id. The ok promise result will be in the following form:\n// #    [{id:1234, title: 'some title'}]\nexport async function searchArticlesByID(id) {\n    const endpoint = '/data/search/articles/byid';\n    const resp = await axiosDefault.post(`${serverPath}${endpoint}`,{\n        id :id\n    });\n    return resp.data\n}\n\n// # Searches the backend for one or more article(s) (partial)\n// # with the given title. The ok promise result will be in the\n// # following form:\n// #    [{id:1234, title:'given title'}, ...]\nexport async function searchArticlesByTitle(title) {\n    const endpoint = '/data/search/articles/bytitle'\n    const resp = await axiosDefault.post(`${serverPath}${endpoint}`, {\n        title :title\n    });\n    return resp.data\n}\n\n// # Searches the backend for one or more article(s) (partial)\n// # where the body (main text bulk) matches the given str.\n// # As this query can result in many nodes, an option (arg)\n// # for limiting the response is given. The ok promise \n// # result will be in the following form:\n// #    [{id:1234, title:'some title'}, ...]\nexport async function searchArticlesByContent(str, limit=5) {\n    const endpoint = '/data/search/articles/bycontent';\n    const resp = await axiosDefault.post(`${serverPath}${endpoint}`, {\n        str   :str,\n        limit :limit\n    });\n    return resp.data\n}\n\n// # Searches the backend for articles that are linked from\n// # an article with the specified ID. Limit option limits\n// # the response. The ok promise result will be in the\n// # following form:\n// #    [{id:1234, title:'some title'}, ...]\nexport async function searchArticlesByNeighs(id, limit=5) {\n    const endpoint = '/data/search/articles/byneigh';\n    const resp = await axiosDefault.post(`${serverPath}${endpoint}`, {\n        id      :id,\n        limit   :limit\n    });\n    return resp.data\n}\n\n// # Searches the backend for the HTML content of an article with\n// # the given ID. The ok promise result is a string.\nexport async function searchHTMLByID(id) {\n    const endpoint = '/data/search/html/byid';\n    const resp = await axiosDefault.post(`${serverPath}${endpoint}`, {\n        id :id\n    });\n    return resp.data\n}\n\n// # Checks if relationships between articles (i.e one links another)\n// # exist. The expected input is an array of arrays, where the \n// # nested one contains two elements: 'from' ID and 'to' ID.\n// #\n// # For example, if there exists two articles in the database\n// # where the former has id 8, latter has id 9, and it is of interest\n// # whether or not 8 links to 9, then the function argument can be\n// #    [[8,9]]  (order matters).\n// # \n// # If the relationship is true, then the ok promise result will be\n// #    [true]\n// #\n// # This function can naturally have multiple checks, such as\n// #    [[1,2],[3,4],[5,6]] -> (the result might be) [true, true, false]\nexport async function checkRelsExist(rels) {\n    const endpoint = '/data/check/relsexist';\n    const resp = await axiosDefault.post(`${serverPath}${endpoint}`, {\n        rels :rels\n    });\n    return resp.data\n}\n\n// # Retrieves a specified amount of random articles (partial).\n// # The ok promise result will be in the following form:\n// #    [{id:1234, title:'some title'}, ...]\nexport async function randomArticles(limit) {\n    const endpoint = '/data/random/articles';\n    const resp = await axiosDefault.post(`${serverPath}${endpoint}`, {\n        limit :limit\n    });\n    return resp.data \n} \n\n\n","//import {nodeSingle, nodeNeigh, nodeRand, checkNeighs} from '../api/api.js'\nimport * as api from '../api/api.js'\nimport GRAPHCONFIG from './config.js'\n\n// # This file contains code for managing graph data, which\n// # is intended to be used internally by d3js state (found\n// # inside this folder).\n\n// # The purpose of Node(s) is to be used inside Graph and\n// # contain values which are provided by the api -- also\n// # additional state that is set and used by d3js.\n\n// # The graph data-structure inside Graph is a bit special;\n// # it stores nodes inside a hashmap, where keys are id's\n// # and values are Node(s) with those id's (id's are given\n// # by the api and server db, so should be unique). Edge(s),\n// # on the other hand, are stored inside an array and contain\n// # id's (from&to) of Nodes, which are used to access the\n// # aforementioned hashmap.\n\n\n// # Simple store of data provided by the API (i.e.\n// # wiki nodes in the db). Will also get data from\n// # d3js. \nexport class Node {\n    constructor(apiJSON, preserved) {\n        // # API data.\n        this.id = apiJSON.id\n        this.title = apiJSON.title\n        this.html = \"\"\n        // # Generations are how long a node has been\n        // # around. The Graph evolves by fetching new\n        // # nodes in batches, and each batch is a gen.\n        // # This is used to flush nodes that are too old.\n        this.generation = 0\n        // # This value is used for special nodes which\n        // # should be preserved on generation flushes.\n        this.preserved = preserved\n        // # Positions used by d3.\n        this.x = GRAPHCONFIG.graphWidth / 2\n        this.y = GRAPHCONFIG.graphHeight / 2\n    }\n}\n\n// # Simple store of Node IDs -- used to access hashmap\n// # in Graph to retrieve the associated Nodes.\nexport class Edge {\n    constructor(fromID, toID) {\n        this.fromID = fromID\n        this.toID = toID\n    }\n}\n\nexport class Graph {\n    constructor() {\n        // # Keys: ID, Vals: Node(s) with those IDs\n        this.nodes = {}\n        // # Array of Edge(s), which have keys to\n        // # the hashmap above.\n        this.edges = []\n    }\n\n    // # Returns all nodes contained in this instance in a\n    // # format that works for D3JS.\n    formatD3Nodes() {\n        return Object.values(this.nodes)\n    }\n    // # Returns all edges contained in this instance in a\n    // # format that works for D3JS.\n    formatD3Edges() {\n        return this.edges.map(e => {\n             return  {\n                'source': this.nodes[e.fromID],\n                'target': this.nodes[e.toID]\n            }\n        })\n    }\n    // # Get all special nodes (marked as preserved) contained \n    // # in this instance -- in an array that is ordered by their\n    // # generations (ascending order).\n    preservedNodeChan() {\n        return Object.values(this.nodes)\n            .filter(node => {return node.preserved})\n            .sort((n, m) => {return n.generation - m.generation})\n    }\n\n    // # Removes all expired data, specifically Nodes that have exceeded\n\t// # the specified <GRAPHCONFIG.graphGenerationCount> and all associated\n\t// # edges. This also ticks the generation count in each Node. Toggling\n\t// # <force> to true will also removed all preserved Nodes.\n    trimGeneration(force=false) {\n        // # Trim Node(s) & tick them.\n        Object.values(this.nodes).forEach(node => {\n            node.generation++\n            if (node.preserved == false || force == true) {\n                if (node.generation > GRAPHCONFIG.graphGenerationCount) {\n                    delete this.nodes[node.id]\n                }\n            }\n        })\n        // # Trim Edge(s).\n        this.edges = this.edges.filter(edge => {\n            return (\n                this.nodes[edge.fromID] != undefined &&\n                this.nodes[edge.toID] != undefined\n            )\n        })\n    }\n\n    // # Re-calculates all edges by checking with the api.\n    // # As such, this method can be very expensive.\n    async recalculateEdges() {\n        // # Remove all expired data.\n        this.trimGeneration()\n\n        // # Create a cartesian product such that each element \n        // # in <candidates> are unique ordered pairs consisting \n        // # of Node IDs -- in all variations except when n=n.\n        let candidates = []\n        let ids = Object.keys(this.nodes)\n        for (let i=0; i<ids.length; i++) {\n            for (let j=0; j<ids.length; j++) {\n                if (i != j) {\n                    candidates.push([ids[i], ids[j]])\n                }\n            }    \n        }\n        // # Check the cartesian product with the API. This will return\n        // # another array of booleans with a 1:1 mapping to <candidates>.\n        let confirmations = await(api.checkRelsExist(candidates.map(pair => {\n            // # Map each candidate such that both elements are titles.\n            // # This is required by the api.\n            return [this.nodes[pair[0]].id, this.nodes[pair[1]].id]\n        })))\n\n        this.edges = candidates\n            // # Only use the ordered pairs in <candidates> that\n            // # have been confirmed in <confirmations>.\n            .filter((_, index) => {return confirmations[index]})\n            // # Map ordered pairs into Edge objects.\n            .map(pair => {return new Edge(pair[0], pair[1])})\n\n    }\n\n\n    // # This method evolves this Graph instance. It uses a seed,\n    // # which is expected to be a Node (or undefined for random).\n    // # The seed will be added to this graph, along with any\n    // # neighbours (disabled with <pullNeigh>=false) which are \n    // # found by the api. This method also recalculates all edges\n    // # at the end (and ticks generations).\n    async addInitialGenerationBySeedNode(seedNode, pullNeigh=true) {\n        let newNodes = {}\n\n        newNodes[seedNode.id] = seedNode\n\n        // # Optionally get neighbours of seed.\n        if (pullNeigh==true) {\n            // # Get and add new nodes.\n            let neighsOfSeed = await api.searchArticlesByNeighs(\n                seedNode.id, GRAPHCONFIG.graphNeighbourCount\n            )\n            neighsOfSeed.forEach(neigh => {\n                newNodes[neigh.id] = new Node(neigh, false)\n            })\n        }\n        // # Expand the internal hashmap before re-calculating edges.\n        this.nodes = Object.assign(this.nodes, newNodes)\n        // # NOTE: This is a naive implementation, or a shortcut,\n        // # because many of the edges are already known. For \n        // # instance <seedNode> is obviously connected to\n        // # <neighsOfSeed>. Also, the edges in this.edges are\n        // # known. This is left as a TODO.\n        await this.recalculateEdges()\n    }\n\n    async addInitialGeneration(nodeID=undefined, nodeTitle=undefined, pullNeigh=true) {\n        if (nodeID == undefined && nodeTitle == undefined) {\n            let randResp = await api.randomArticles(1)\n            nodeID = randResp[0].id\n            nodeTitle = randResp[0].title\n        }\n\n        let seedNode = new Node({id:nodeID, title:nodeTitle}, true)\n        await this.addInitialGenerationBySeedNode(seedNode, pullNeigh)\n    }\n}\n\n\n","\n\nimport * as d3 from 'd3'\nimport * as d3prefabs from './d3prefabs.js'\nimport {Graph} from './graphtypes.js'\nimport GRAPHCONFIG from './config.js'\n\n\nexport default class D3State {\n    constructor(divID, containerCallbacks) {\n        // # Accessed with this div tag.\n        this.divID = divID\n\t\t\n        // # Graph state.\n        this.data = new Graph()\n\n        // # State of D3js prefab objects.\n        this.svg = null\n        this.forceSimulation = null\n        this.linkGroup = null\n        this.nodeGroup = null\n        \n        // # Force an initial setting.\n        this.setSVG()\n        this.setForceSimulation()\n        this.setLinkGroup()\n        this.setNodeGroup()\n     \n\t\t// # Keep track of required callbacks.\n        this.containerCallbacks = containerCallbacks\n    }\n\n    // # Simply resets this.graph.\n    async resetGraph() {\n        this.data.nodes = {}\n        this.data.edges = []\n        this.data.addInitialGeneration()\n            .then(_ => {\n                this.setForceSimulation()\n                this.apply()\n            })\n    }\n\n    // # Reset graph with specified seed data.\n    async resetGraphUsingNode(nodeID, nodeTitle) {\n        this.data.nodes = {}\n        this.data.edges = []\n        this.data.addInitialGeneration(nodeID, nodeTitle)\n            .then(_ => {\n                this.setForceSimulation()\n                this.apply()\n            })\n    }\n \n    // # Event for node click.\n    onNodeClick = (e, node) => {\n        this.containerCallbacks.callback.nodeClick(e, node)\n        this.data.addInitialGenerationBySeedNode(node).then(_ => {\n            this.setForceSimulation()\n            this.apply()\n        })\n    }\n\n    // # Mount and set SVG object.\n    setSVG() {\n        this.svg = d3prefabs.svg({\n            divID:  this.divID,\n            // # On resize event, recalc node size and physics.\n            resizeCallback: () => {\n                this.setNodeGroup()\n                this.setForceSimulation()\n                this.apply()\n            }\n        })\n    }\n\n    // # Setup of force simulation prefab.\n    setForceSimulation() {\n\t\tlet l = this.data.formatD3Nodes().length\n        let width = this.svg.node().getBoundingClientRect().width\n        let height = this.svg.node().getBoundingClientRect().height\n\n\t\tthis.forceSimulation = d3prefabs.forceSimulation({\n            forceCenterX:\t\twidth/2,\n\t\t\tforceCenterY:\t\theight/2,\n\t\t\tcollisionDistance:\tGRAPHCONFIG.nodeSize(l, width, height)*1.5,\n\t\t\tlinkDistance:\t\tGRAPHCONFIG.linkDistance(l, width, height)\n\t\t})\n    }\n\n    // # Sets/replaces a new link group.\n    setLinkGroup() {\n\t\tthis.linkGroup = d3prefabs.linkGroup({\n\t\t\tsvg:\t\t\tthis.svg,\n\t\t\tcontainerID:\tGRAPHCONFIG.d3containerName,\n\t\t\toldLinkGroup:\tthis.linkGroup,\n\t\t\tedges:\t\t\tthis.data.formatD3Edges(),\n\t\t\tlinkWidth:\t\tGRAPHCONFIG.linkWidth,\n\t\t\tlinkColor:\t\tGRAPHCONFIG.linkColor\n\t\t})\n    }\n\n    // # Sets/replaces a new node group.\n    setNodeGroup() {\n\t\tlet l = this.data.formatD3Nodes().length\n        let width = this.svg.node().getBoundingClientRect().width\n        let height = this.svg.node().getBoundingClientRect().height\n\n\t\tthis.nodeGroup = d3prefabs.nodeGroup({\n\t\t\tsvg:\t\t\tthis.svg,\n\t\t\tcontainerID:\tGRAPHCONFIG.d3containerName,\n\t\t\toldNodeGroup:\tthis.nodeGroup,\n\t\t\tnodes:\t\t\tthis.data.formatD3Nodes(),\n\t\t\tnodeSize:\t\tGRAPHCONFIG.nodeSize(l, width, height),\n\t\t\tnodeColorFunc:\tGRAPHCONFIG.nodeColor,\n\t\t\tclickEvent:\t\tthis.onNodeClick,\n\t\t\tlabelOffsetX:\tGRAPHCONFIG.labelOffsetX,\n\t\t\tlabelOffsetY:\tGRAPHCONFIG.labelOffsetY,\n\t\t\tlabelColor:\t\tGRAPHCONFIG.labelColor,\n            linkGroup:      this.linkGroup\n\t\t})\n    }\n\n\n    // # Starts rendering and physics loop.\n    // # Each call to this func includes all\n    // # new nodes & links/edges in this.data\n    apply() {\n        // # Clear old (AA: room for improvements).\n        // # This prevents node duplication.\n        this.svg.selectAll(\n            GRAPHCONFIG.d3containerName).remove()\n\n        // # Set new.\n        this.setLinkGroup()\n        this.setNodeGroup()\n\n        d3prefabs.apply({\n            nodes:          this.data.formatD3Nodes(),\n            nodeGroup:      this.nodeGroup,\n            edges:          this.data.formatD3Edges(),\n            linkGroup:      this.linkGroup,\n            forceSimulation:this.forceSimulation\n        })\n    }\n    \n}\n","import * as d3 from 'd3'\nimport GRAPHCONFIG from './config.js'\n\n\n\n// # Mount and get SVG object.\nexport function svg(config) {\n    let {divID, resizeCallback} = config\n   \n    // # The svg needs a wrapping layer for pan+zoom\n    // # UI because that prevents jitters.\n    let uiLayer = d3.select(divID).append('uiLayer')\n\n    // # width&height is not set because pre-existing\n    // # dimensions aren't accurate. Instead, a resize\n    // # event is triggered by the containing React comp.\n    // # The resize event for d3 is defined further down\n    // # in this func.\n    let svg = uiLayer.append('svg')\n\n    d3.select(window)\n        .on(\"resize\", function(e) {\n            svg.attr(\"width\", e.target.innerWidth * 0.9);\n            svg.attr(\"height\", e.target.innerHeight * 0.9);\n            resizeCallback()\n    });\n    // global zoom & ban behavior.\n    let zoom = d3.zoom()\n        .scaleExtent([1,1])     // change at your own risk -- seems buggy with\n        .on('zoom', (e) => {    // other values (zoom isn't centered).\n            svg.attr('transform', e.transform)\n        })\n    uiLayer.call(zoom)\n    return svg\n}\n\n// # Force simulation prefab.\nexport function forceSimulation(config) {\n\tlet {forceCenterX, forceCenterY, collisionDistance, linkDistance} = config\n\treturn d3.forceSimulation()\n            .force('charge',  d3.forceManyBody())\n            .force('center',  d3.forceCenter(forceCenterX, forceCenterY))\n\t\t\t.force('collide', d3.forceCollide(collisionDistance))\n            .force('link',    d3.forceLink().id(n => n.id).distance(linkDistance))\n}\n\n// # Get a new link group (with old appended if it\n// # is provided).\nexport function linkGroup(config) {\n    let {svg, containerID, oldLinkGroup, edges, linkWidth, linkColor} = config\n    let newLinkGroup = svg\n            .append(containerID)\n            .attr(\"class\", \"links\")\n            .selectAll(\"line\")\n            .data(edges)\n            .enter()\n            .append(\"line\")\n            .attr(\"stroke-width\", linkWidth)\n            .attr('stroke', linkColor)\n\n    if (oldLinkGroup != null) {\n        newLinkGroup.enter().append(oldLinkGroup)\n    }\n   return newLinkGroup\n}\n\n// # Get a new node group (with old appended if it\n// # is provided).\nexport function nodeGroup(config) {\n\tlet {svg, containerID, oldNodeGroup, nodes, nodeSize, nodeColorFunc,\n\t\t\tclickEvent, labelOffsetX, labelOffsetY, labelColor, linkGroup} = config\n\n    // # New group.\n    let newNodeGroup = svg\n        .append(containerID)\n        .attr(\"class\", \"nodes\")\n        .selectAll(containerID)\n        .data(nodes)\n        .enter().append(containerID)\n        .on('click', clickEvent)\n        .on('mouseover', (_, n) => {\n            newNodeGroup\n                .select('circle')\n                .attr(\"opacity\", m => n.id == m.id? 1: 0.2)\n            newNodeGroup\n                .select('text')\n                .attr('opacity', m => n.id == m.id? 1: 0.2)\n            linkGroup.style('opacity', (l, _) => {\n                return l.source.id == n.id || l.target.id == n.id? 1: 0\n            })\n        })\n        .on('mouseout', (_, n) => {\n            newNodeGroup\n                .select('circle')\n                .attr('opacity', _ => 1)\n            newNodeGroup\n                .select('text')\n                .attr('opacity', labelColor)\n            linkGroup.style('opacity', _ => 1)\n         })\n    // # Visual.\n    newNodeGroup.append(\"circle\")\n        .attr(\"r\", nodeSize)\n        .attr(\"fill\", nodeColorFunc)\n    // # Label.\n    newNodeGroup.append(\"text\")\n        .text(n => n.title)\n        .attr('x', labelOffsetX)\n        .attr('y', labelOffsetY)\n        .attr('stroke', labelColor)\n\n    // # Merge with old.\n    if (oldNodeGroup != null) {\n        newNodeGroup.enter().append(oldNodeGroup)\n    }\n    return newNodeGroup\n}\n\n// # Starts rendering and physics loop.\nexport function apply(config) {\n    let {nodes, nodeGroup, edges,\n            linkGroup, forceSimulation} = config\n\n    forceSimulation\n            .nodes(nodes)\n            .on('tick', () => {\n                // # Update loop task for physics sim.\n                linkGroup\n                    .attr('x1', (n) => { return n.source.x })\n                    .attr('y1', (n) => { return n.source.y })\n                    .attr('x2', (n) => { return n.target.x })\n                    .attr('y2', (n) => { return n.target.y })\n                // # Update nodes.\n                nodeGroup\n                    .attr('transform', (n) => {\n                        return `translate(${n.x}, ${n.y})`\n                    })\n            })\n    forceSimulation\n            .force('link')\n            .links(edges)\n}\n","import React, { Component } from 'react'\nimport D3State from '../../graph/d3state.js'\nimport * as api from '../../api/api.js'\n\nexport default class Graph extends Component {\n    state = {d3state:null}\n\n    // # Sets up d3graph in state with a rand graph.\n    componentDidMount() {\n        // # Define new D3Graph abstraction obj.\n        let g = new D3State(\n            // # graphbody is the target html element.\n            '#graphbody', \n            // # Pass object containing callbacks to obj.\n            {callback: {\n                nodeClick:this.containerCallbackOnNodeClick\n            }}\n        )\n        g.resetGraph()\n        this.setState({\n            d3state: g,\n        })\n        // # Trigger resize so the graph svg doesn't have to\n        // # rely on a pre-existing size (a bit fiddely).\n        window.dispatchEvent(new Event('resize'));\n\n        // # Register self for callback in the search\n        // # box such that new text will search a new\n        // # node and reset the graph.\n        let {callbackManager} = this.props\n        callbackManager.registerObserver(\n            // # Subject cls and func names.\n            \"SearchBar\",\n            \"done\",\n            // # Ref to self and current func name.\n            this,\n            \"componentDidMount\",\n            // # Callback which accepts wiki data that\n            // # is fetched after using the search bar.\n            // # then resets the graph with \n            // # that new data (first obj).\n            (wikidata) => {\n                if (wikidata.length != 0) {\n                let d = wikidata[0]\n                g.resetGraphUsingNode(d.id, d.title)\n                    .then(res=>console.log(res))\n                    .catch(rej=>console.log(rej))\n                }\n            }\n        )\n    }\n\n    // # Callback that is meant to be called from D3Graph\n    // # object when a node is clicked. This will fetch\n    // # the html of that node and send it to all observers\n    // # (observer pattern) as a callback.\n    containerCallbackOnNodeClick = (_, node) => {\n        // # Get all relevant observers and their callbacks.\n        let {callbackManager} = this.props\n        let callbacks = callbackManager.callbackFuncs(\n            'Graph', 'containerCallbackOnNodeClick'\n        )\n        // # Add html to node if it has none, then\n        // # use the callback to present that html.\n        if (node.html == \"\") {\n            api.searchHTMLByID(node.id)\n                .then(res => {\n                    // # Assign html in case the node is\n                    // # used again at a later point.\n                    node.html = res\n                    callbacks.forEach(f => f(node.html))\n                })\n        } else {\n            callbacks.forEach(f => f(node.html))\n        }\n    }\n    \n    render() {\n        return (\n            <div id='graphbody'/>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport \"./WikiBox.css\";\n\nexport default class WikiBox extends Component {\n  state = { content: \"\" };\n\n  componentDidMount() {\n    // # Register self as an observer for\n    // # the event when a d3js node is clicked\n    // # and the html content is fetched.\n    let { callbackManager } = this.props;\n    callbackManager.registerObserver(\n      // # Target cls and func name.\n      \"Graph\",\n      \"containerCallbackOnNodeClick\",\n      // # Ref to self and callback.\n      this,\n      \"componentDidMount\",\n      (txt) => {\n        this.setState({ content: txt });\n      }\n    );\n  }\n\n  render() {\n    return (\n    <div className=\"article-wrapper\">\n        <div  className=\"article-content\" dangerouslySetInnerHTML={{ __html: this.state.content }} />\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./Spinner.css\";\n\n\nexport default class Spinner extends Component {\nstate = {loading:false};\n\nrender() {\n    return (\n        //no spinner css applied if loading != true\n        <div className={this.state.loading ? 'loader' : ''}></div>\t\n    );\n  }\n\n}\n","import React, { Component } from \"react\";\nimport Spinner from \"../spinner/Spinner\";\nimport * as api from \"../../api/api.js\";\n\nimport \"../spinner/Spinner.css\";\nimport \"./SearchBar.css\";\n\nexport default class SearchBar extends Component {\n    state = { currentText: \"\", resultReturned: true };\n\n    // # Called when text input is completed. Uses input to\n    // # fetch content from the backend and send it along to\n    // # everyone that is registered in the callbackmanager\n    // # for this func. Not super clean impl but better than\n    // # the previous alternative.\n    done = () => {\n        // # Get observers.\n        let { callbackManager } = this.props;\n        let callbacks = callbackManager.callbackFuncs(\n            // # Curernt cls and func.\n            \"SearchBar\",\n            \"done\"\n        );\n        // # Try request and pass to observers.\n        api\n            .searchArticlesByContent(this.state.currentText, 1)\n            .then((resp) => {\n                if (resp.length == 0) {\n                    this.setState({ resultReturned: false });\n                    return;\n                }\n                this.setState({ resultReturned: true });\n                // # Send to all observers.\n                callbacks.forEach((f) => f(resp));\n            })\n            .catch((_) => {\n                this.setState({ resultReturned: false });\n            });\n    };\n\n    textInput = () => {\n        return (\n            //red alert outline if nothing found in search is defined in state\n            <div\n                className={\n                    this.state.resultReturned ? \"search-bar\" : \"search-bar red-alert\"\n                }\n            >\n                <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    placeholder=\"Search your topic!\"\n                    // # Update state to current field value.\n                    onChange={(e) => {\n                        this.setState({ currentText: e.target.value });\n                    }}\n                    // # On enter; call this.done.\n                    onKeyDown={(e) => {\n                        if (e.key === \"Enter\") {\n                            this.done();\n                        }\n                    }}\n                />\n                <button className=\"search-btn\" type=\"submit\"\n                    onClick={(e) => {\n                        this.done();\n                    }}>\n                    <span className=\"magnify\"></span>\n                </button>\n            </div>\n        );\n    };\n    render() {\n        return (\n            <div className=\"search-container\">\n                {this.textInput()}\n                <Spinner />\n            </div>\n        );\n    }\n}\n","// # This class is a bare implementation of what can be thought\n// # of as an observer pattern but with the difference that this\n// # class stores multiple different observers and can be used\n// # by multiple different subjects at the same time. This is\n// # because of a inner registry that tracks references and\n// # identifier strings. It may be a bit of a mess but is better\n// # than- and an alternative to passing callbacks up, down and\n// # between react components (between component children).\n// #\n// # The setup and usage is very simple and here is a brief\n// # usage pointer (more details are in the very short cls):\n// #    You have two components, the former (A) wants to\n// #    notify the latter (B) with a callback when some\n// #    new state/event happens.\n// # \n// #    Give a shared instance of this class to both components\n// #    and register B as an observer by calling 'registerObserver'.\n// #    The arguments here (read the doc above the method) should\n// #    provide enough information to keep everything unique, even\n// #    if B is one of many instances of some class, and all instances\n// #    are registered. \n// # \n// #    Then, when an even occurs and A want's to notify, call\n// #    'callbackFuncs', which gives an array of functions, and\n// #    use them. The function signature of these callbacks hasn't\n// #    gotten much consideration in this implementation, since the\n// #    class below was written to solve a specific purpose (pass\n// #    just a string in a couple of callbacks).\n// #    \n\n\n\nexport default class CallbackManager {\n    constructor() {\n        // # Registry is the entire state for this class -- it is\n        // # a map where keys are strings identifying subjects\n        // # (observer patter), while values are arrays with\n        // # of arrays, where the inner has the following form:\n        // #    -   Index 0 is a reference to an observer (this\n        // #        from an observer). It is used such that\n        // #        multiple instances of a specific observer\n        // #        can exist in this array, where the other\n        // #        identifier (index 1) is the same.\n        // #    -   Index 1 specifies a function name for an\n        // #        observer. This is used such that one observer\n        // #        reference (index 0) can have multiple funcs.\n        // #    -   Index 2 is the callback. For simplicity and\n        // #        the specific use-case of this app, the policy\n        // #        is one argument per func (unless it makes \n        // #        sense and is obvious to do otherwise)\n        // #\n        // # Visual example: \n        // # {\n        // #    subjectClassName.subjectFuncName: [\n        // #        [observerInstanceRef, funcName, callback],\n        // #        ...\n        // #    ],\n        // #    ...\n        // # }\n        this.registry = {}\n    }\n\n    // # Here, an observer instance can register a callback\n    // # for a subject. The callback is called when a subject\n    // # decides. The arguments are as follows:\n    // #    subjectClassName    : proper class name of target subject.\n    // #    subjectFuncName     : proper func name of target subject cls.\n    // #    observerRef         : reference from observer (use 'this' here).\n    // #    observerFuncName    : the func name in which this func is called.\n    // #    callback            : callback\n    registerObserver(subjectClassName, subjectFuncName,\n                        observerRef, observerFuncName,\n                            callback) {\n\n        let idSubject = `${subjectClassName}.${subjectFuncName}`\n\n        // # Try get the specified subject in the registry.\n        // # Create it if it doesn't exist.\n        let subjectCandidate = this.registry[idSubject]\n        if (subjectCandidate == undefined) {\n            this.registry[idSubject] = []\n            subjectCandidate = this.registry[idSubject]\n        }\n\n        // # Try to get the specified observer in the registry\n        // # for the specified subject.\n        let observerCandidate = subjectCandidate.filter(arr => {\n            // # Index 0 is the reference (this from observer).\n            // # Index 1 is the callback function name id.\n            return arr[0] === observerRef && arr[1] === observerFuncName \n        })\n\n        // # Create observer and callback pair if it doesn't\n        // # exist for that subject.\n        if (observerCandidate.length == 0) {\n            subjectCandidate.push([observerRef, observerFuncName, callback])\n        } else {\n            // # Update callback.\n            observerCandidate[2] = callback\n        }\n    }\n\n    // # Get all observer callback funcs for a specific\n    // # subject. Use case: when a subject wants to notify\n    // # observers.\n    callbackFuncs(subjectClassName, subjectFuncName) {\n        let idSubject = `${subjectClassName}.${subjectFuncName}`\n        let observers = this.registry[idSubject]\n        if (observers == undefined) {\n            return []\n        }\n        return observers.map(arr => arr[2])\n    }\n}\n","import React from 'react'\n\n// # Simple slider component.\nexport default function Slider({id, minVal, maxVal, defaultVal, callback, txt}) {\n\treturn (\n\t\t<div className='slidercontainer' >\n\t\t\t<p> {txt} </p>\n\t\t\t<input\n\t\t\t\tclassName='slider'\n\t\t\t\ttype='range'\n\t\t\t\tid={id}\n\t\t\t\tmin={minVal}\n\t\t\t\tmax={maxVal}\n\t\t\t\tdefaultValue={defaultVal}\n\t\t\t\tonChange={callback}\n\t\t\t/>\n\t\t</div>\t\n\t)\n}\n","import React from 'react'\nimport GRAPHCONFIG from '../../graph/config.js'\nimport Slider from '../slider/Slider.js'\n\n// # Component for user-facing configurations for complete app.\nexport default function ConfigBox() {\n\treturn (\n\t\t<div>\n\t\t\t<p> Changes applied will affect next graph interaction </p>\n\t\t\t{/* Slider for adjusting how many neighs a node can have (max). */}\n\t\t\t<Slider\n\t\t\t\tid='graphNeighCountSlider'\n\t\t\t\tminVal={2}\n\t\t\t\tmaxVal={10}\n\t\t\t\tdefaultVal={GRAPHCONFIG.graphNeighbourCount}\n\t\t\t\tcallback={(e) => {GRAPHCONFIG.graphNeighbourCount = parseInt(e.target.value)}}\n\t\t\t\ttxt=\"Max number of neighbours per node.\"\n\t\t\t/>\n\t\t\t{/* Slider for adjusting how many generations a node can live (max). */}\n\t\t\t<Slider\n\t\t\t\tid='graphGenerationCountSlider'\n\t\t\t\tminVal={2}\n\t\t\t\tmaxVal={10}\n\t\t\t\tdefaultVal={GRAPHCONFIG.graphGenerationCount}\n\t\t\t\tcallback={(e) => {GRAPHCONFIG.graphGenerationCount = parseInt(e.target.value)}}\n\t\t\t\ttxt=\"Lifetime of nodes (1 lifetime = 1 click)\"\n\t\t\t/>\n\t\t\t{/* Adjuster/multipler of node sizes. */}\n\t\t\t<Slider\n\t\t\t\tid='nodeSizeMultiplierSlider'\n\t\t\t\tminVal={GRAPHCONFIG.nodeSizeMin}\n\t\t\t\tmaxVal={GRAPHCONFIG.nodeSizeMax}\n\t\t\t\tdefaultVal={GRAPHCONFIG.nodeSizeMultiplier}\n\t\t\t\tcallback={(e) => {GRAPHCONFIG.nodeSizeMultiplier= parseInt(e.target.value)}}\n\t\t\t\ttxt=\"Node size multiplier\"\n\t\t\t/>\n\t\t\t{/* Adjuster for brightness on nodes*/}\n\t\t\t<Slider\n\t\t\t\tid='nodeColorBrightnessSlider'\n\t\t\t\tminVal={GRAPHCONFIG.nodeColorBrightnessMin}\n\t\t\t\tmaxVal={GRAPHCONFIG.nodeColorBrightnessMax}\n\t\t\t\tdefaultVal={GRAPHCONFIG.nodeColorBrightness}\n\t\t\t\tcallback={(e) => {GRAPHCONFIG.nodeColorBrightness= parseInt(e.target.value)}}\n\t\t\t\ttxt=\"Node brighness\"\n\t\t\t/>\n\t\t\t<Slider\n\t\t\t\tid='linkDistanceSlider'\n\t\t\t\tminVal={GRAPHCONFIG.linkDistanceMin}\n\t\t\t\tmaxVal={GRAPHCONFIG.linkDistanceMax}\n\t\t\t\tdefaultVal={GRAPHCONFIG.linkDistanceMultiplier}\n\t\t\t\tcallback={(e) => {GRAPHCONFIG.linkDistanceMultiplier= parseInt(e.target.value)}}\n\t\t\t\ttxt=\"Link distance multiplier\"\n\t\t\t/>\n\n\n\n\t\t</div>\n\t)\n}\n","import React, { Component } from \"react\";\nimport \"./NavBar.css\";\nimport ConfigBox from \"../cfgbox/ConfigBox.js\";\n\nexport default class NavBar extends Component {\n    render() {\n        return (\n            <div className=\"topnav background-2\">\n                <div className=\"title\">WikiNodes (prototype)</div>\n                <div className=\"dropdown\">\n                    <button className=\"dropbtn\">\n                        Customize\n                        <i className=\"fa fa-caret-down\"></i>\n                    </button>\n                    <div className=\"dropdown-content\">\n                        <ConfigBox />\n                    </div>\n                </div>\n                <a className=\"git-link\" href=\"https://github.com/crunchypi/wikinodes-server\">Github source</a>\n\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Graph from \"./components/graph/Graph\";\nimport WikiBox from \"./components/wikibox/WikiBox\";\nimport SearchBar from \"./components/searchbar/SearchBar.jsx\";\nimport CallbackManager from \"./callbackmanager/callbackmanager.js\";\nimport NavBar from \"./components/navbar/NavBar\";\n\nexport default class App extends Component {\n    state = { callbackManager: new CallbackManager() };\n\n    //import Spinner from \"./components/spinner/Spinner\";\n    //import ConfigBox from \"./components/cfgbox/ConfigBox.js\";\n\n    render() {\n        return (\n            <div className=\"App\">\n                <NavBar />\n                <SearchBar callbackManager={this.state.callbackManager} />\n                <div className=\"main-container\">\n                    <div className=\"graph-box\">\n                        <Graph callbackManager={this.state.callbackManager} />\n                    </div>\n                    <WikiBox callbackManager={this.state.callbackManager} />\n                </div>\n                <div className=\"footer\">\n                    <a className=\"wiki-att\" href=\"https://wikimediafoundation.org/\">Attribution: Wikimedia Foundation</a>\n                    <span><br></br>Creative Commons Attribution-ShareAlike 3.0 Unported License (CC BY-SA) </span>\n                    <span><br></br> GNU Free Documentation License (GFDL)</span>\n                </div>\n            </div>\n        );\n    }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}